<?xml version="1.0" encoding="utf-8"?>
<project name="trails" default="all" basedir=".">
	<property file="build.properties"></property>
	<property name="src.dir" value="${basedir}/src"/>
	<property name="src-15.dir" value="${basedir}/src-1.5"/>
	<property name="src-test.dir" value="${basedir}/test"/>
	<property name="lib.home" value="${basedir}/lib"/>
	<property name="dist.file" value="${basedir}/../trails.zip" />
	 
	<property environment="env" />
	<property name="ant.home" value="${env.ANT_HOME}" />
	<available file="${ant.home}/lib/ant-apt.jar" property="apt.installed" />
	<property name="jdk.home" value="${env.JAVA_HOME}" />
	<property name="example.name" value="simple" />
	<property name="security-example.name" value="security" />
	<property name="saxon.jar" value="c:/java/saxon/saxon8.jar" />
	<property name="junit.report.dir" value="junit-reports" />
	<property name="example.basedir" value="${basedir}/examples/" />
	<property name="tomcat.home" value="${env.TOMCAT_HOME}"/>
 
	<property name="generate.force" value="true"/>
	
	<property name="deploy.dir" value="${basedir}/deploy" />
	<property name="lib.dir" value="${basedir}/lib" />
	
	<property name="jar.file" value="${deploy.dir}/${ant.project.name}.jar" />
	<property name="jar-aspects.file" value="${deploy.dir}/${ant.project.name}-aspects.jar" />
	<property name="base_app.dir" value="${basedir}/base_app/" />
	<property name="base_security.dir" value="${basedir}/base_security/" />
	
	<property name="java5.tools.jar" value="${java.home}/../lib/tools.jar" />
	<property name="test.src" value="${basedir}/test" />
	<available file="${jar.file}" property="jar.exists"></available>
	<property name="compile.dir" value="${basedir}/build/classes" />
	
	<path id="class.path">
		<fileset dir="${lib.dir}"></fileset>
		<fileset dir="${tomcat.home}/common/lib"></fileset>
		<path location="${java5.tools.jar}"></path>
	</path>
	
	<property environment="env" />
	<path id="jaxrpc.classpath">
		<path refid="class.path"/>
		<fileset dir="${env.JAXRPC_HOME}/lib"></fileset>
	</path>
	
	
	
	  <taskdef 
	      resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties">
	    <classpath refid="class.path"></classpath>
	  </taskdef>
    
	<taskdef name="apt" classname="org.apache.tools.ant.taskdefs.Apt" classpathref="class.path"/>

	<target name="all" depends="clean,junit,deploy-example,functional-tests" />
	
	<target name="dist" depends="clean,jar">
		<delete file="${dist.file}" />
		<zip destfile="${dist.file}">
			<fileset dir="${basedir}">
				<exclude name="build/**/*"/>
				<exclude name="www/**/*" />
				<exclude name="bin/**/*" />
				<!-- <exclude name="examples/**/*" /> -->
			</fileset>
			
		</zip>
	</target>
	
	<target name="init">
		<mkdir dir="${compile.dir}"/>
		<mkdir dir="${deploy.dir}"/>
		<mkdir dir="${junit.report.dir}"/>
	</target>
	
	<target name="clean">
		<delete dir="${compile.dir}" />
		<delete dir="${deploy.dir}" />
		<delete dir="${basedir}/work" />
		<delete dir="${example.basedir}/${example.name}/deploy" />
		<delete dir="${junit.report.dir}" />
		<delete >
			<fileset dir="${example.basedir}">
				<include name="**/lib/*" />
				<include name="**/WEB-INF/classes/**/*" />
				<include name="**/build/**/*" />
				<include name="**/deploy/*" />
			</fileset>
		</delete>
	</target>
		
	<target name="build-hibernate-config" depends="jar" description="builds the hibernate config for the unit tests">
		
		<!-- This is a hack, for some reason it doesn't pick up BlogEntry
		if i don't touch the file.  Hopefully this will be fixed in a later version 
		of apt or apt-ant -->
		<touch>
			<fileset dir="${src-test.dir}/org/trails/test" includes="*.java"></fileset>
		</touch>
        <touch>
			<fileset dir="${src-test.dir}/org/trails/security/test" includes="*.java"></fileset>
		</touch>
        <apt
			fork="true"
			nocompile="true"
			destdir="${compile.dir}"
			
			factory="org.trails.hibernate.HibernateAnnotationProcessorFactory"
			srcdir="${test.src}">
        	<option name="src.file" value="blah.xml"/>
			<classpath>
				<path refid="class.path" />
				<pathelement location="${compile.dir}" />
				
			</classpath>
				
		</apt>	

	</target>
	
	<target name="compile" depends="init">
		<echo message="${java5.tools.jar}" />
		<mkdir dir="${compile.dir}" />
		<iajc source="1.5" srcdir="${src.dir}" destdir="${compile.dir}" classpathref="class.path" debug="on">
		</iajc>	
		<copy todir="${compile.dir}">
			<fileset dir="${src.dir}" excludes="**/*.java" />
		</copy> 

	</target>
	
	<target name="jar" depends="compile">
		<mkdir dir="${deploy.dir}"/>
		<jar destfile="${jar.file}">
			<fileset dir="${compile.dir}">
				<exclude name="**/hibernate.*"/>
				<exclude name="**/applicationContext*"/>
				<exclude name="**/log4j.*"/>
				<exclude name="**/*Aspect.class"/>
				<include name="**/*"/>
			</fileset>
		</jar>
		<jar destfile="${jar-aspects.file}">
			<fileset dir="${compile.dir}">
				<include name="**/*Aspect.class"/>
			</fileset>
		</jar>
	</target>

	<target name="compile-tests" depends="jar">
		<iajc source="1.5" srcdir="${src-test.dir}" destdir="${compile.dir}" aspectpath="${jar-aspects.file}" debug="on">
			<classpath>
				<path refid="class.path"></path>
				<fileset dir="${basedir}/support"></fileset>
				<pathelement location="${compile.dir}"/>
			</classpath>
		</iajc>
		<copy todir="${compile.dir}">
			<fileset dir="${src-test.dir}">
				<exclude name="**/*.java" />
				<exclude name="hibernate.cfg.xml"/>
			</fileset>
		</copy>
	</target>
	
	<target name="build-example" depends="update-example">
		<ant dir="${example.basedir}/${example.name}" inheritall="false"></ant>
	</target>
	
	<target name="update-tutorial">
		<antcall target="update-project">
			<param name="project.dir" value="c:/chris/tmp/trails-tutorial" />
			<param name="project.name" value="trails-tutorial" />
		</antcall>
	</target>
				
	<target name="update-example">
		<property name="example.project.dir" value="${example.basedir}/${example.name}" />
		<antcall target="update-project">
			<param name="project.dir" value="${example.project.dir}" />
			<param name="project.name" value="${example.name}" />
			<param name="project.lib" value="${example.project.dir}/lib" />
			<param name="project.context.dir" value="${example.project.dir}/context" />
		</antcall>
	</target>

	<target name="update-security-example">
		<property name="security-example.project.dir" value="${example.basedir}/${security-example.name}" />
		<antcall target="update-project">
			<param name="project.dir" value="${security-example.project.dir}" />
			<param name="project.name" value="${security-example.name}" />
			<param name="project.lib" value="lib" />
			<param name="project.context.dir" value="${security-example.project.dir}/context" />
		</antcall>
		<antcall target="add-security">
			<param name="project.dir" value="${security-example.project.dir}" />
			<param name="project.name" value="${security-example.name}" />
			<param name="project.lib" value="lib" />
			<param name="project.context.dir" value="${security-example.project.dir}/context" />
		</antcall>		
	</target>
		
	<target name="install-apt" unless="apt.installed">
		<copy todir="${ant.home}/lib" file="${lib.dir}/ant-apt.jar" />
	</target>

	<target name="check-for-apt" unless="apt.installed">
		<fail message="You must run install-apt to install the apt jar ant.home/lib directory first."/>
	</target>
	
	<target name="create-wst-project">
		<input message="Base directory: " addproperty="newproject.basedir"></input>
		<input message="Project name: " addproperty="newproject.name"></input>
		<input message="Context dir: " addproperty="newproject.context.subdir"></input>
		<property name="newproject.dir" value="${newproject.basedir}/${newproject.name}"></property>
		<antcall target="update-project" inheritrefs="true">
			<param name="project.dir" value="${newproject.dir}" />
			<param name="project.name" value="${newproject.name}" />
			<param name="project.lib" value="${newproject.dir}/${newproject.context.subdir}/WEB-INF/lib" />
			<param name="project.context.dir" value="${newproject.dir}/${newproject.context.subdir}" />
			<param name="wst.project" value="true" />
		</antcall>
	</target>
		
	<target name="create-project" depends="check-for-apt" description="Create a new Trails project">
		<input message="Base directory: " addproperty="newproject.basedir"></input>
		<input message="Project name: " addproperty="newproject.name"></input>
		<input message="Context dir: " addproperty="newproject.context.subdir"></input>
		<property name="newproject.dir" value="${newproject.basedir}/${newproject.name}"></property>
		<mkdir dir="${newproject.dir}"/>
		<antcall target="update-project" inheritrefs="true">
			<param name="project.dir" value="${newproject.dir}" />
			<param name="project.name" value="${newproject.name}" />
			<param name="project.lib" value="${newproject.dir}/lib" />
			<param name="project.context.dir" value="${newproject.dir}/context" />
		</antcall>
	</target>
	
	<target name="jar-if-necessary" unless="jar.exists"  >
		<antcall target="jar" inheritrefs="true"></antcall>
	</target>
	
	<target name="upgrade-project" depends="check-for-apt" description="Upgrade a project to latest version of Trails">
		<input message="Base directory: " addproperty="newproject.basedir"></input>
		<input message="Project name: " addproperty="newproject.name"></input>
		<property name="newproject.dir" value="${newproject.basedir}/${newproject.name}"></property>
		<move  todir="${newproject.dir}.old">
			<fileset dir="${newproject.dir}"></fileset>
		</move>
		<antcall target="update-project" inheritrefs="true">
			<param name="project.dir" value="${newproject.dir}" />
			<param name="project.name" value="${newproject.name}" />
		</antcall>
		<!-- copy source code -->
		<copy todir="${newproject.dir}/src">
			<fileset dir="${newproject.dir}.old/src"  >
				<include name="**/*.java" />
				<include name="build.properties" />
			</fileset>
		</copy>
		<!-- copy custom pages -->
		<copy todir="${newproject.dir}/context/WEB-INF">
			<fileset dir="${newproject.dir}.old/context/WEB-INF"  >
				<include name="**/*.html" />
				<include name="**/*.page" />
				<exclude name="**/Default*" />
			</fileset>
		</copy>		
	</target>
		
	<target name="add-security" depends="init" description="Add security to a project" >
		<input message="Base directory:" addproperty="project.basedir" />
		<input message="Project name:" addproperty="project.name" />
		<input message="Context dir:" addproperty="context.dir" />
		<property name="project.dir" value="${project.basedir}/${project.name}" />
		<copy todir="${project.dir}/conf" overwrite="true">
			<filterset>
				<filter token="app.name" value="${project.name}" />
			</filterset>
			<fileset dir="${base_security.dir}/conf">
			</fileset>
		</copy>		
		<copy todir="${project.dir}/${context.dir}" overwrite="true">
			<filterset>
				<filter token="app.name" value="${project.name}" />
			</filterset>
			<fileset dir="${base_security.dir}/context">
			</fileset>
		</copy>		
	</target>	
	
	<target name="copy-webapp">
		<mkdir dir="${project.context.dir}" />
		<copy todir="${project.context.dir}">
			<fileset dir="${base_app.dir}/context">
				<exclude name="**/WEB-INF/web.xml" />
				<exclude name="**/WEB-INF/base_app*" />
				<exclude name="**/META-INF/**/*" if="wst.project" />
				<exclude name="fckeditor/**/*" unless="include.fckeditor" />
			</fileset>
		</copy>
		<copy tofile="${project.context.dir}/WEB-INF/web.xml"
			file="${base_app.dir}/context/WEB-INF/web.xml" overwrite="true">
			<filterset>
				<filter token="app.name" value="${project.name}" />
			</filterset>
			
		</copy>		
		<copy tofile="${project.context.dir}/WEB-INF/${project.name}.application" 
			file="${base_app.dir}/context/WEB-INF/base_app.application" >
			<filterset>
				<filter token="app.name" value="${project.name}" />
			</filterset>
		</copy>
        <mkdir dir="${project.lib}" />
		<copy todir="${project.lib}">
			<fileset dir="${lib.dir}">
				<exclude name="log4j*" if="wst.project"/>
			</fileset>
		</copy>
		<copy todir="${project.lib}" file="${jar.file}" />
		<copy todir="${project.lib}" file="${jar-aspects.file}" />
		<copy tofile="${project.context.dir}/WEB-INF/${project.name}_en.properties" 
			file="${base_app.dir}/context/WEB-INF/base_app_en.properties"/>
		<copy tofile="${project.context.dir}/WEB-INF/${project.name}_pt.properties"
			file="${base_app.dir}/context/WEB-INF/base_app_pt.properties"/>
        <copy tofile="${project.context.dir}/WEB-INF/${project.name}_es_AR.properties"
            file="${base_app.dir}/context/WEB-INF/base_app_es_AR.properties"/>
	</target>
	
	<target name="copy-base">
		<mkdir dir="${project.dir}" />
		<copy todir="${project.dir}">
			<fileset dir="${base_app.dir}" >
				<exclude name="conf/**/*" />
				<exclude name="build.*" />
				<exclude name="context/**/*" />
			</fileset>
		</copy>		
		<copy tofile="${project.dir}/build.xml" 
			file="${base_app.dir}/build.xml" >
			<filterset>
				<filter token="app.name" value="${project.name}" />
			</filterset>
		</copy>
		<copy tofile="${project.dir}/build.properties" 
			file="${base_app.dir}/build.properties" >
			<filterset>
				<filter token="lib.dir" value="${project.lib}" />
			</filterset>
		</copy>
	</target>
	
	<target name="copy-conf">
		<mkdir dir="${project.dir}/conf" />
		<copy todir="${project.dir}/conf">
			<fileset dir="${base_app.dir}/conf" />
		</copy>		
	</target>	
	
	<target name="update-project"  depends="jar,copy-base,copy-conf,copy-webapp">
		<mkdir dir="${project.dir}" />
		
	</target>
	       	
	<target name="junit" depends="build-hibernate-config,compile-tests" description="Run unit tests">
		<mkdir dir="${junit.report.dir}" />
		<junit  fork="yes" 
			filtertrace="off" 
			showoutput="true"
			haltonfailure="true" 
			haltonerror="true"
			printsummary="true">
			<classpath>
				<path refid="class.path"></path>
				<pathelement location="${compile.dir}"/>
				<pathelement location="${src-test.dir}"/> <!-- this is the location for the i18n properties files -->
			</classpath>
			<batchtest filtertrace="off" todir="${junit.report.dir}">
				<formatter type="plain" />
				<formatter type="xml"/>
				<fileset dir="${src-test.dir}">
					<include name="**/*Test.java" />
					<exclude name="**/functional/*"/>
					<exclude name="**/ComponentTest.java" />
					<exclude name="**/PageTest.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="run-single-test" depends="compile-tests" >
		<input message="Test case: " addproperty="test.name"></input>
		<junit  fork="yes" 
			filtertrace="off" 
			showoutput="true"
			haltonfailure="true" printsummary="true">
			<classpath>
				<path refid="class.path"></path>
				<pathelement location="${compile.dir}"/>
			</classpath>
			<test name="${test.name}" todir="${junit.report.dir}">
				<formatter type="plain"/>
			</test>
		</junit>
	</target>
	
	<target name="deploy-example" depends="update-example" description="Redeploys the examples/simple application">
		<ant dir="${basedir}/examples/simple" target="war" inheritall="false"></ant>
		<!-- Give tomcat the time to deploy... i know it's bad...-->
		<sleep seconds="120"/>
	</target>
		
	<target name="functional-tests" depends="compile-tests" description="Run the functional tests agains the examples/simple application" >
		
		<mkdir dir="${junit.report.dir}" />
		<junit  fork="yes" 
			filtertrace="off" 
			showoutput="true"
			haltonfailure="true" 
			haltonerror="true"
			printsummary="true" 
			dir="${basedir}">
			<classpath>
				<path refid="class.path"></path>
				<pathelement location="${compile.dir}"/>
				<fileset dir="${basedir}/support"></fileset>

			</classpath>
			<batchtest filtertrace="off" todir="${junit.report.dir}">
				<formatter type="xml" />
				<fileset dir="${src-test.dir}">
					<include name="**/functional/*Test.java"/>
					<exclude name="**/FunctionalTest.java" />
					<exclude name="**/SecurityTest.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	
	
	<target name="build-component-docs" description="Produces component documentation">
		
		<delete file="${basedir}/www/component-reference/index.html" />
		<style
			in="${basedir}/www/component-reference/ComponentReference.xml" 
			style="${basedir}/doc/ComponentReference.xsl"
			out="${basedir}/www/component-reference/index.html">
			<classpath>
				<pathelement location="${saxon.jar}"/>
			</classpath>
		</style>
	</target>
	
	<target name="javadoc">
		<delete dir="${basedir}/www/apidocs"></delete>
		<mkdir dir="${basedir}/www/apidocs" />
		<javadoc windowtitle="Trails"
			packagenames="org.trails.*"
			destdir="${basedir}/www/apidocs">
			
			<sourcepath location="${src.dir}" />
			<classpath refid="class.path"></classpath>
		</javadoc>
	</target>
	
	<target name="upgrade-tapestry-files">
		<style basedir="${src.dir}" style="upgradeTapestry3to4.xsl" 
			destdir="upgraded" extension=".jwc" force="true">
			<include name="**/*.jwc"/>
		</style>
			<style basedir="${basedir}/examples" style="upgradeTapestry3to4.xsl" 
				destdir="upgraded" extension=".page">
				<include name="**/*.page"/>
			</style>
	</target>
	<target name="junit-report" depends="junit">
	     <mkdir dir="${junit.report.dir}/html"/>
	     <junitreport>
		<fileset dir="${junit.report.dir}">
			<include name="TEST-*.xml"/>
		</fileset>
		<report todir="${junit.report.dir}/html"/>
	     </junitreport>
	</target>		
</project>

