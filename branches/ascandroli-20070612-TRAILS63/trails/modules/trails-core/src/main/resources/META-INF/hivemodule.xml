<module id="trails.core" version="1.0.0">

	<service-point id="DefaultDescriptorService" interface="org.trails.descriptor.DescriptorService"/>
	<service-point id="DefaultPersistenceService" interface="org.trails.persistence.PersistenceService"/>

	<service-point id="FormClientPropertyPersistenceScope"
				   interface="org.apache.tapestry.record.ClientPropertyPersistenceScope">
		<invoke-factory>
			<construct class="org.trails.io.FormClientPropertyPersistenceScope">
				<set-object property="requestCycle" value="infrastructure:requestCycle"/>
			</construct>
		</invoke-factory>
	</service-point>

	<service-point id="FormClientPropertyPersistenceStrategy"
				   interface="org.apache.tapestry.record.PropertyPersistenceStrategy">
		<invoke-factory model="threaded">
			<construct class="org.trails.io.FormClientPropertyPersistenceStrategy">
				<set-object property="request" value="infrastructure:request"/>
				<set-object property="scope" value="service:FormClientPropertyPersistenceScope"/>
			</construct>
		</invoke-factory>

	</service-point>

	<contribution configuration-id="tapestry.persist.PersistenceStrategy">
		<strategy name="client:form" object="service:FormClientPropertyPersistenceStrategy"/>
	</contribution>

	<!--
		====================================================================================================================
		Custom "squeezer" for trails-managed entities (turns squeezer service into a pipeline). Credits to James Carman.
		====================================================================================================================
	-->
	<service-point id="DataSqueezerTerminator" visibility="private" interface="org.apache.tapestry.services.DataSqueezer">
		<invoke-factory>
			<construct class="org.apache.tapestry.util.io.DataSqueezerImpl">
				<set-configuration property="squeezeAdaptors" configuration-id="tapestry.data.SqueezeAdaptors"/>
			</construct>
		</invoke-factory>
	</service-point>

	<implementation service-id="tapestry.data.DataSqueezer">
		<invoke-factory service-id="hivemind.lib.PipelineFactory">
			<create-pipeline filter-interface="org.trails.io.SqueezeFilter"
							 configuration-id="DataSqueezerFilters"
							 terminator="service:DataSqueezerTerminator"/>
		</invoke-factory>
	</implementation>

	<service-point id="EntitySqueezeStrategy" interface="org.trails.io.SqueezeFilter">
		<invoke-factory>
			<construct class="org.trails.io.EntitySqueezerStrategy">
				<set-object property="persistenceService" value="service:DefaultPersistenceService"/>
				<set-object property="descriptorService" value="service:DefaultDescriptorService"/>
			</construct>
		</invoke-factory>
	</service-point>

	<configuration-point id="DataSqueezerFilters" schema-id="hivemind.lib.Pipeline">
		Allows you to plug in your own custom data squeezers in front of the default Tapestry
		data squeezer.
	</configuration-point>

	<contribution configuration-id="DataSqueezerFilters">
		<filter name="EntitySqueezeStrategy" object="service:EntitySqueezeStrategy"/>
	</contribution>

	<service-point id="PropertyDescriptorSqueezeStrategy" interface="org.apache.tapestry.util.io.SqueezeAdaptor">
		<invoke-factory>
			<construct class="org.trails.io.PropertyDescriptorSqueezerStrategy">
				<set-object property="descriptorService" value="service:DefaultDescriptorService"/>
			</construct>
		</invoke-factory>
	</service-point>

	<service-point id="ClassDescriptorSqueezeStrategy" interface="org.apache.tapestry.util.io.SqueezeAdaptor">
		<invoke-factory>
			<construct class="org.trails.io.ClassDescriptorSqueezerStrategy">
				<set-object property="descriptorService" value="service:DefaultDescriptorService"/>
			</construct>
		</invoke-factory>
	</service-point>

	<service-point id="ClassAdaptor" interface="org.apache.tapestry.util.io.SqueezeAdaptor">
		<invoke-factory>
			<construct class="org.trails.io.ClassAdaptor"/>
		</invoke-factory>
	</service-point>

	<service-point id="PropertyChangeAdaptor" interface="org.apache.tapestry.util.io.SqueezeAdaptor">
		<invoke-factory>
			<construct class="org.trails.io.PropertyChangeAdaptor"/>
		</invoke-factory>
	</service-point>

	<service-point id="EntitySqueezerAdaptor" interface="org.apache.tapestry.util.io.SqueezeAdaptor">
		<invoke-factory>
			<construct class="org.trails.io.EntitySqueezerAdaptor">
				<set-object property="persistenceService" value="service:DefaultPersistenceService"/>
				<set-object property="descriptorService" value="service:DefaultDescriptorService"/>
			</construct>
		</invoke-factory>
	</service-point>

	<contribution configuration-id="tapestry.data.SqueezeAdaptors">
		<adaptor object="service:ClassAdaptor"/>
		<adaptor object="service:PropertyDescriptorSqueezeStrategy"/>
		<adaptor object="service:ClassDescriptorSqueezeStrategy"/>
		<adaptor object="service:PropertyChangeAdaptor"/>
		<adaptor object="service:EntitySqueezerAdaptor"/>
	</contribution>

	<contribution configuration-id="tapestry.services.ApplicationServices">
		<service name="BlobService" object="service:BlobService"/>
	</contribution>

	<service-point id="BlobService" interface="org.trails.component.blob.BlobDownloadService">
		<invoke-factory>
			<construct class="org.trails.component.blob.BlobDownloadService">
				<set-object property="exceptionReporter" value="infrastructure:requestExceptionReporter"/>
				<set-object property="linkFactory" value="infrastructure:linkFactory"/>
				<set-object property="response" value="service:tapestry.globals.WebResponse"/>
				<set-object property="persistenceService" value="spring:persistenceService"/>
				<set-object property="descriptorService" value="spring:descriptorService"/>
			</construct>
		</invoke-factory>
	</service-point>

	<service-point id="ApplicationExceptionPresenter" interface="org.apache.tapestry.error.ExceptionPresenter">
		<invoke-factory>
			<construct class="org.trails.exception.ApplicationExceptionPresenterImpl">
				<set-object property="exceptionPageName" value="infrastructure:exceptionPageName"/>
				<set-object property="requestExceptionReporter" value="infrastructure:requestExceptionReporter"/>
				<set-object property="responseRenderer" value="infrastructure:responseRenderer"/>
				<set-object property="pageResolver" value="service:trails.core.PageResolver"/>
			</construct>
		</invoke-factory>
	</service-point>
	
	<contribution configuration-id="tapestry.InfrastructureOverrides">
		<property name="exceptionPresenter" object="service:ApplicationExceptionPresenter"/>
	</contribution>
	
	<service-point id="PageResolver" interface="org.trails.page.PageResolver">
		<invoke-factory>
			<construct class="org.trails.page.DefaultPageResolver"/>
		</invoke-factory>
	</service-point>
=</module>