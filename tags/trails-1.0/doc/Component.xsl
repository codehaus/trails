<?xml version="1.0" encoding="utf-8"?>

<!-- 
	Component.xsl - part of the TapDoc project http://www.erinor.webzona.hu/project/tapdoc

	Copyright (c) Norbert SÃ¡ndor 2004
	TapDoc may be used freely as long as all included copyright notices are left intact.
	TapDoc is provided without warranty.
-->

<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xhtml="http://www.w3.org/1999/xhtml">

	<!--***********************************************************************
		Process a component specification, see embedded comments.
	-->
	<xsl:template match="component-specification">
		<xsl:param name="library" /> <!-- The component-reference/library node  -->
		<xsl:param name="componentType" /> <!-- library/component-type node which defines this component -->
		<xsl:param name="componentPath" /> <!-- absolute path of the component's specification -->
		<xsl:param name="extendedComponentInfoDir" select="'./extension'" /> <!-- directory with extended component information -->

		<!-- Read extended component information. -->		
		<xsl:variable name="extendedComponentInfo" select="document(concat($extendedComponentInfoDir, substring-before($componentPath, '.jwc'), '/', 'component.xml'))/extended-component-info" />
		
		<!-- Begin a new result document -->
		<xsl:result-document href="{$library/@display-name}.{$componentType/@type}.html">
			<xsl:comment>Generated by TapDoc - http://www.erinor.webzona.hu/project/tapdoc</xsl:comment>
			<html>
				<head>
					<title><xsl:value-of select="$library/@display-name" />.<xsl:value-of select="$componentType/@type" /></title>
					<link href="resource/ComponentReference.css" rel="stylesheet" type="text/css" />
					<script src="resource/Component.js"></script>
				</head>
				<body>
					
					<!-- Render top navigation bar. -->
					<xsl:call-template name="renderNavBar">
						<xsl:with-param name="libraryName" select="$library/@display-name" />
						<xsl:with-param name="componentType" select="$componentType" />
					</xsl:call-template>
					<hr/>
					
					<!-- Render the component's reference. -->
					<xsl:call-template name="renderReferenceBody">
						<xsl:with-param name="extendedComponentInfo" select="$extendedComponentInfo" />
						<xsl:with-param name="componentType" select="$componentType" />
						<xsl:with-param name="library" select="$library" />
					</xsl:call-template>
					
					<!-- Render "toggle help" checkbox. -->
					<table border="0" width="100%">
						<tr>
							<td width="100%" align="right">
								<input type="checkbox" onclick="toggleHelp();" />Toggle help
							</td>
						</tr>
					</table>
					
					<hr/>
					
					<!-- Render bottom navigation bar. -->
					<xsl:call-template name="renderNavBar">
						<xsl:with-param name="libraryName" select="$library/@display-name" />
						<xsl:with-param name="componentType" select="$componentType" />
					</xsl:call-template>
					
				</body>
			</html>			
		</xsl:result-document>
	</xsl:template>

	<!--***********************************************************************
		Renders the navigation bar.
	-->
	<xsl:template name="renderNavBar">
		<xsl:param name="libraryName" />
		<xsl:param name="componentType" />
		
		<table border="0" width="100%">
			<tr>
				<td><a href="index.html">Home</a></td>
				<td width="100%"></td>
				
				<xsl:if test="0 != count($componentType/preceding-sibling::component-type)">
					<td><a href="{$libraryName}.{$componentType/preceding-sibling::component-type[position()=1]/@type}.html">Prev</a></td>
				</xsl:if>
				<xsl:if test="0 != count($componentType/following-sibling::component-type)">
					<td><a href="{$libraryName}.{$componentType/following-sibling::component-type[position()=1]/@type}.html">Next</a></td>
				</xsl:if>
			</tr>
		</table>
		
	</xsl:template>

	<!--***********************************************************************
		Renders the component's reference documentation.
	-->
	<xsl:template name="renderReferenceBody">
		<xsl:param name="library" />
		<xsl:param name="componentType" />
		<xsl:param name="extendedComponentInfo" />
		
		<!-- Top section: component name, class, visual sample -->
		<table width="100%" border="0" cellpadding="0" cellspacing="0">
			<tr>
		  	
				<!-- Name and class of the component -->
				<td><span class="ComponentName"><xsl:value-of select="$componentType/@type" /></span><br/>
					<xsl:choose>
						<xsl:when test="0 = count(@class)" >default component class</xsl:when>
						<xsl:otherwise>
							<xsl:call-template name="linkToClass" >
								<xsl:with-param name="className" select="@class" />
								<xsl:with-param name="library" select="$library" />
							</xsl:call-template>
						</xsl:otherwise>
					</xsl:choose>
				</td>
				
				<td width="100%">&#160;</td>
				
				<!-- Visual sample of the component if any. -->
				<td nowrap="nowrap" class="VisualSampleCell" valign="middle">
					<xsl:if test="0 != count($extendedComponentInfo/visual-sample/*)">
						<xsl:copy-of select="$extendedComponentInfo/visual-sample/*" />
					</xsl:if>
					<xsl:if test="0 = count($extendedComponentInfo/visual-sample/*) and 0 != count($extendedComponentInfo/visual-sample)">
						Visual Component
					</xsl:if>
					<xsl:if test="0 = count($extendedComponentInfo/visual-sample)">
						Non-Visual Component
					</xsl:if>
				</td>
			
			</tr>
			<tr>
				<td height="40" colspan="3"></td>
			</tr>
		</table>
		
		<!-- Description -->		
		<table width="100%" border="0" cellpadding="0" cellspacing="0">
			<tr>
				<td><span class="Section">Description</span></td>
			</tr>
			<tr>
				<td class="Text"><xsl:value-of select="description" /></td>
			</tr>
			<tr>
				<td height="20" colspan="3"></td>
			</tr>
		</table>

		<!-- See also section -->				
		<xsl:if test="0 != count($extendedComponentInfo/see-also)">
			<table width="100%" border="0" cellpadding="0" cellspacing="0">
				<tr>
					<td><span class="Section">See also</span></td>
				</tr>
				<tr>
					<td class="Text">
						<xsl:apply-templates select="$extendedComponentInfo/see-also">
							<xsl:with-param name="seeAlso" select="$extendedComponentInfo/see-also" />
							<xsl:with-param name="currentLibrary" select="$library" />
						</xsl:apply-templates>
					</td>
				</tr>
				<tr>
					<td height="20" colspan="3"></td>
				</tr>
			</table>
		</xsl:if>

		<!-- Parameters -->
		<table width="100%" border="0" cellpadding="0" cellspacing="0">
			<tr>
				<td><span class="Section">Parameters</span></td>
			</tr>
			<xsl:apply-templates select="parameter[position() = 1]" mode="header">
				<xsl:with-param name="library" select="$library" />
			</xsl:apply-templates>
		</table>
		
		<!-- allow body, allow informal parameters, reserved parameters -->
		<table border="0" cellpadding="0" cellspacing="0">
			
			<!-- allow-body -->
			<tr>
				<td class="Text">Allow body</td>
				<td align="left" valign="middle">
					<xsl:if test="@allow-body = 'yes' or 0 = count(@allow-body)">
						<img src="resource/yes.gif" />
					</xsl:if>
					<xsl:if test="@allow-body = 'no'">
						<img src="resource/no.gif" />
					</xsl:if>
					
					<xsl:variable name="extendedAllowBody" select="$extendedComponentInfo/@allow-body" />
					(<xsl:choose>
						<xsl:when test="count($extendedAllowBody) != 0"><xsl:value-of select="$extendedAllowBody" /></xsl:when>
						<xsl:when test="@allow-body = 'yes' or 0 = count(@allow-body)">rendered</xsl:when>
						<xsl:when test="@allow-body = 'no'">removed</xsl:when>
					</xsl:choose>
					<xsl:choose>
						<xsl:when test="@allow-body = 'yes' or 0 = count(@allow-body)"><img src="resource/help.gif" style="display:none;" title="The body of the component may contain other components and static tags as well, all of them will be rendered." />
						</xsl:when>
						<xsl:when test="@allow-body = 'no'"><img src="resource/help.gif" style="display:none;" title="The body of the component is removed when the component is rendered. The component's body mustn't contain other components but it may contain static tags (which is useful for maintaining a WYSIWYG preview)." />
						</xsl:when>
					</xsl:choose>)
				</td>
			</tr>
			
			<!-- allow-informal-parameters -->
			<tr>
				<td class="Text">Allow informal parameters&#160;&#160;&#160;</td>
				<td align="left" valign="middle"><xsl:if test="@allow-informal-parameters = 'yes' or 0 = count(@allow-informal-parameters)"><img src="resource/yes.gif" /></xsl:if><xsl:if test="@allow-informal-parameters = 'no'"><img src="resource/no.gif" /></xsl:if></td>
			</tr>
		
			<!-- reserved-parameters -->
			<tr>
				<td class="Text">Reserved parameters&#160;</td>
				<td align="left" valign="middle">
					<xsl:for-each select="reserved-parameter">
						<xsl:if test="position() > 1">, </xsl:if>
						<xsl:value-of select="@name" />
					</xsl:for-each>
					<xsl:if test="0 = count(reserved-parameter)">
						&#160;<strong>-</strong>
					</xsl:if>
				</td>
			</tr>

			<tr>
				<td height="20" colspan="2"></td>
			</tr>
		</table>
		
	</xsl:template>

	<!-- Renders the "see also" section of the page -->
	<xsl:template match="see-also">
		<xsl:param name="currentLibrary" />
		<xsl:param name="seeAlso" />
		
		<xsl:for-each select="$seeAlso/*">
			<xsl:if test="position() > 1">, </xsl:if>
			
			<xsl:if test="name() = 'component'">
				<xsl:choose>
					<xsl:when test="0 != count(@library)">
						<xsl:call-template name="linkToComponent">
							<xsl:with-param name="currentLibraryName" select="$currentLibrary/@display-name" />
							<xsl:with-param name="libraryName" select="@library" />
							<xsl:with-param name="componentName" select="@name" />
						</xsl:call-template>
					</xsl:when>
					<xsl:otherwise>
						<xsl:call-template name="linkToComponent">
							<xsl:with-param name="currentLibraryName" select="$currentLibrary/@display-name" />
							<xsl:with-param name="libraryName" select="$currentLibrary/@display-name" />
							<xsl:with-param name="componentName" select="@name" />
						</xsl:call-template>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:if>
			<xsl:if test="name() = 'class'">
				<xsl:call-template name="linkToClass">
					<xsl:with-param name="className" select="@name" />
					<xsl:with-param name="truncateLongerThan" />
					<xsl:with-param name="library" select="$currentLibrary" />
				</xsl:call-template>
			</xsl:if>
		</xsl:for-each>
	</xsl:template>

	<!-- Renders a link to the given component. -->
	<xsl:template name="linkToComponent">
		<xsl:param name="currentLibraryName" /> <!-- name of the current library -->
		<xsl:param name="libraryName" /> <!-- name of the library which contains the referred component -->
		<xsl:param name="componentName" /> <!-- name of the referred component -->
		
		<a href="{$libraryName}.{$componentName}.html">
			<xsl:if test="$currentLibraryName != $libraryName"><xsl:value-of select="$libraryName" />.</xsl:if><xsl:value-of select="$componentName" />
		</a>
		
	</xsl:template>
	
	<!-- Renders a link to a Java class -->
	<xsl:template name="linkToClass">
		<xsl:param name="className" /> <!-- fully qualified class name -->
		<xsl:param name="library" /> <!-- name of the current library -->
		<xsl:param name="truncateLongerThan" select="number('1000')" /> <!-- truncate class names which are longer than this value -->

		<xsl:variable name="apiLinkDef" select="$library/../api[starts-with($className, @package-prefix)][position()=1]" />
		
		<xsl:choose>
			<xsl:when test="count($apiLinkDef) = 0">
				<xsl:call-template name="insertClassName">
					<xsl:with-param name="truncateLongerThan" select="$truncateLongerThan" />
					<xsl:with-param name="className" select="$className" />
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<a href="{concat($apiLinkDef/@site, translate($className, '.', '/'), '.html')}" title="{$className}">
					<xsl:call-template name="insertClassName">
						<xsl:with-param name="truncateLongerThan" select="$truncateLongerThan" />
						<xsl:with-param name="className" select="$className" />
					</xsl:call-template>
				</a>
			</xsl:otherwise>
		</xsl:choose>
			
	</xsl:template>

	<!-- Inserts a class name -->	
	<xsl:template name="insertClassName">
		<xsl:param name="className" /> <!-- class name -->
		<xsl:param name="truncateLongerThan" /> <!-- truncate class names which are longer than this value -->
		
		<xsl:choose>
			<xsl:when test="string-length($className) &gt; number($truncateLongerThan)">
				...<xsl:value-of select="substring($className, string-length($className) - number($truncateLongerThan))" />
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$className" />
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template>
	
	<!-- Renders the header of the parameters table and applies templates to parameters. -->
	<xsl:template match="parameter" mode="header">
		<xsl:param name="library" />
		
		<tr>
			<td><table border="0" cellpadding="0" cellspacing="0">
				<tr><td colspan="6" height="10"></td></tr>
				<tr>
					<td class="ParameterOthersHeader">name</td>
					<td class="ParameterOthersHeader">type</td>
					<td class="ParameterOthersHeader">direction</td>
					<td class="ParameterRequiredHeader">required</td>
					<td class="ParameterDefaultHeader">default value</td>
					<td class="ParameterDescriptionHeader">description</td>
				</tr>
				<tr>
					<td colspan="6" height="1" bgcolor="#000000"></td>
				</tr>
				<xsl:apply-templates select="../parameter" mode="others">
					<xsl:with-param name="library" select="$library" />				
				</xsl:apply-templates>
				</table>
			</td>
		</tr>
		
		<tr>
			<td height="20"></td>
		</tr>

	</xsl:template>

	<!-- Renders a row of the parameters table. -->
	<xsl:template match="parameter" mode="others">
		<xsl:param name="library" />
		
		<tr>
			<td colspan="6" height="1" bgcolor="#dddddd"></td>
		</tr>
		
		<tr>
			
			<!-- parameter name -->
			<td class="ParameterCell"><xsl:value-of select="@name" /></td>
			<td class="ParameterCell">
				<xsl:if test="0 != count(@type)">
					<xsl:call-template name="linkToClass" >
						<xsl:with-param name="className" select="@type" />
						<xsl:with-param name="truncateLongerThan" select="number('35')" />
						<xsl:with-param name="library" select="$library" />
					</xsl:call-template>
				</xsl:if>
				<xsl:if test="0 = count(@type)">
					<xsl:call-template name="linkToClass" >
						<xsl:with-param name="className" select="'java.lang.Object'" />
						<xsl:with-param name="truncateLongerThan" select="number('35')" />
						<xsl:with-param name="library" select="$library" />
					</xsl:call-template>
				</xsl:if>
			</td>
			
			<!-- parameter direction -->
			<td class="ParameterCell">
				<xsl:if test="0 = count(@direction)">custom <img src="resource/help.gif" style="display:none;" title="The component explicitly controls reading and writing values through the binding." /></xsl:if>
				<xsl:if test="0 != count(@direction)"><xsl:value-of select="@direction" /> 
					<xsl:choose>
						<xsl:when test="@direction = 'in'">
							<img src="resource/help.gif" style="display:none;" title="The property is set from the parameter before the component renders, and is reset back to default value after the component renders." />
						</xsl:when>
						<xsl:when test="@direction = 'form'">
							<img src="resource/help.gif" style="display:none;" title="The property is set from the parameter when the component renders. When the form is submitted, the value is read from the property and used to set the binding value after the component rewinds." />
						</xsl:when>
						<xsl:when test="@direction = 'auto'">
							<img src="resource/help.gif" style="display:none;" title="Creates a synthetic property that works with the binding to read and update. auto parameters must be required, but can be used even when the component is not rendering." />
						</xsl:when>
						<xsl:when test="@direction = 'custom'">
							<img src="resource/help.gif" style="display:none;" title="The component explicitly controls reading and writing values through the binding." />
						</xsl:when>
					</xsl:choose>
				</xsl:if>
			</td>
			
			<!-- required flag -->
			<td class="ParameterCell"><xsl:if  test="@required = 'yes'"><img src="resource/yes.gif" /></xsl:if><xsl:if test="@required = 'no' or 0 = count(@required)">&#160;</xsl:if></td>

			<!-- default value -->			
			<td class="ParameterCell">
				<xsl:if test="0 = count(@default-value)">
					<xsl:if test="@required = 'no' or 0 = count(@required)">
						<xsl:if test="@type = 'boolean'">false</xsl:if>
						<xsl:if test="@type = 'short'">0</xsl:if>
						<xsl:if test="@type = 'int'">0</xsl:if>
						<xsl:if test="@type = 'long'">0</xsl:if>
						<xsl:if test="@type = 'float'">0.0f</xsl:if>
						<xsl:if test="@type = 'double'">0.0</xsl:if>
						<xsl:if test="count(@type) = 0 or (@type != 'boolean' and @type != 'short' and @type != 'int' and @type != 'long' and @type != 'float' and @type != 'double')">null</xsl:if>
					</xsl:if>
					<xsl:if test="@required = 'yes'">
						&#160;
					</xsl:if>
				</xsl:if>
				<xsl:if test="0 != count(@default-value)">
					<xsl:value-of select="@default-value" />
				</xsl:if>
			</td>
			
			<!-- description of the parameter -->
			<td class="ParameterDescriptionCell"><xsl:value-of select="description" />&#160;</td>
			
		</tr>
		
	</xsl:template>

</xsl:stylesheet>