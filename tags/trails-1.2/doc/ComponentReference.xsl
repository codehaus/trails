<?xml version="1.0" encoding="utf-8"?>

<!-- 
	ComponentReference.xsl - part of the TapDoc project http://www.erinor.webzona.hu/project/tapdoc

	Copyright (c) Norbert SÃ¡ndor 2004
	TapDoc may be used freely as long as all included copyright notices are left intact.
	TapDoc is provided without warranty.
-->

<!--
	CSS styles used in this XSL:
	- LibraryName: style of the library's name
	- LibraryComponentCell: style of table cells containing links to references of individual components
-->

<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xhtml="http://www.w3.org/1999/xhtml">

	<!-- Define XHTML output method for the generated files. -->
	<xsl:output method="xhtml" indent="no" doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd" doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN"/>

	<!-- Include XSL for component specification transformation. -->
	<xsl:include href="Component.xsl" />
	
	<!--***********************************************************************
		Creates the main file in the destination directory.
		It is the content of the component reference.
	-->
	<xsl:template match="component-reference">
		<xsl:comment>Generated by TapDoc - http://www.erinor.webzona.hu/project/tapdoc</xsl:comment>

		<html>
			<head>
				<title>Tapestry Component Reference</title>
				<link href="resource/ComponentReference.css" rel="stylesheet" type="text/css" />
			</head>
			<body>
				<xsl:apply-templates select="library" />
			</body>
		</html>
	</xsl:template>
	
	<!--***********************************************************************
		Generates output for a Tapestry library.
		Currently this includes:
		- name of the library
		- links to the reference documentation of all components of the library, displayed in a 5 column table
		- a horizontal rule if this is the last library
	-->
	<xsl:template match="library">
		
		<!-- Load library specification. -->
		<xsl:variable name="librarySpecification" select="document(concat(@src-dir, @path, @name))" />
		
		<!-- Display library name -->
		<span class="LibraryName">
			<xsl:value-of select="@display-name" />
		</span>
		<br/>

		<!-- Links to components of the library. -->
		<table border="0">
			<xsl:apply-templates select="$librarySpecification//component-type[(position()-1) mod 5 = 0]">
				<xsl:with-param name="library" select="." />
			</xsl:apply-templates>
		</table>
		
		<xsl:if test="0 != count(following-sibling::library)">
			<hr/>
		</xsl:if>
		
	</xsl:template>
	
	<!--***********************************************************************
		Generates output for a component of the currently processed library.
	-->	
	<xsl:template match="component-type">
		<xsl:param name="library" />
		
		<tr>
			<xsl:call-template name="renderComponentCell">
				<xsl:with-param name="library" select="$library" />				
			</xsl:call-template>
			
			<xsl:for-each select="following-sibling::component-type[position() &lt; 5]">
				<xsl:call-template name="renderComponentCell">
					<xsl:with-param name="library" select="$library" />				
				</xsl:call-template>
			</xsl:for-each>
		</tr>
		
	</xsl:template>

	<!--***********************************************************************
		Renders the table cell of a component containing a link to the component's reference.
	-->	
	<xsl:template name="renderComponentCell">
		<xsl:param name="library" />
		
		<td width="100" class="LibraryComponentCell">
			<a href="{$library/@display-name}.{@type}.html">
				<xsl:value-of select="@type" />
			</a>
			<xsl:call-template name="processComponentSpecification">
				<xsl:with-param name="library" select="$library" />
			</xsl:call-template>
		</td>
	</xsl:template>
	
	<!--***********************************************************************
		Build the absolute path of the component specification and process it.
	-->	
	<xsl:template name="processComponentSpecification">
		<xsl:param name="library" />
		
		<xsl:choose>
			<!-- Handle absolute specification path. -->
			<xsl:when test="starts-with(@specification-path, '/')">
				<xsl:call-template name="applyComponentSpecification">
					<xsl:with-param name="componentPath" select="@specification-path" />
					<xsl:with-param name="library" select="$library" />
				</xsl:call-template>
			</xsl:when>
			<!-- Handle specification path relative to the library specification's directory. -->
			<xsl:otherwise>
				<xsl:call-template name="applyComponentSpecification">
					<xsl:with-param name="componentPath" select="concat($library/@path, @specification-path)" />
					<xsl:with-param name="library" select="$library" />
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
		
	</xsl:template>
	
	<!--***********************************************************************
		Apply template of component-specification (defined in Component.xsl).
	-->
	<xsl:template name="applyComponentSpecification">
		<xsl:param name="library" />
		<xsl:param name="componentPath" />
		
		<xsl:message>Processing <xsl:value-of select="$componentPath" />...</xsl:message>
		
		<!-- Read specification file of component (the .jwc file). -->
		<xsl:variable name="componentSpecification" select="document(concat($library/@src-dir, $componentPath))" />
		
		<!-- Apply template to component-specification tag. -->
		<xsl:apply-templates select="$componentSpecification/component-specification">
			<xsl:with-param name="library" select="$library" />
			<xsl:with-param name="componentType" select="." />
			<xsl:with-param name="componentPath" select="$componentPath" />
		</xsl:apply-templates>
		
	</xsl:template>
	
</xsl:stylesheet>